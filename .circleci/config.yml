#
#  - Compile JVM/Js
#  - Tests JVM
#  - publish JVM Sonatype Snapshot for branches : main/master/develop
#  - publish JVM Sonatype Stagge/Release (wait approval) for tags release
#
#  DOCKER_CONTEXT is a context global env variable for all application github p2m2 organization
#   - DOCKER_USER          -> login
#   - DOCKER_PASS          -> password
#   - ORGANIZATION_NAME    -> organization register on dockerhub
#
#  CREDENTIAL_CONTEXT used by build.sbt
#   - REALM_CREDENTIAL,HOST_CREDENTIAL,LOGIN_CREDENTIAL,PASSWORD_CREDENTIAL
#
#  NPM_CONTEXT
#   - NPM_TOKEN : token (from ~/.npmrc) to publish nodejs lib
#
version: 2.1
orbs:
  node: circleci/node@5.0.2
workflows:
  compile-workflow:
    jobs:
      - compile:
          context:
            - DOCKER_CONTEXT
      - test_and_coverage_jvm:
          requires:
            - compile
          context:
            - DOCKER_CONTEXT
      - planemo_stage:
          context:
            - DOCKER_CONTEXT
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - develop
                - main
                - master
      - publish_snapshot:
          requires:
            - test_and_coverage_jvm
            - planemo_stage
          context:
            - DOCKER_CONTEXT
            - CREDENTIAL_CONTEXT
            - GPG_CONTEXT
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - develop
                - main
                - master

      - publish_tag_to_sonatype_stagge_for_release:
          context:
            - DOCKER_CONTEXT
            - CREDENTIAL_CONTEXT
            - GPG_CONTEXT
          filters:
            tags:
              only: /.*/
            branches:
              ignore: /.*/
      
      # only develop is build and push on dockerhub !
      - build_branch:
          context:
            - DOCKER_CONTEXT
          filters:
            tags:
              ignore: /.*/
            branches:
              only:
                - develop

      # all tags are build and push on dockerhub !
      - build_tag_latest:
          context:
            - DOCKER_CONTEXT
          filters:
            tags:
              only: /.*/
            branches:
              # nothing coming from branch are deployed as latest
              ignore: /.*/

executors:

  openjdk:
      working_directory: ~/repo
      docker:
        - image: circleci/openjdk:8-jdk
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}

  python:
      working_directory: ~/planemo
      docker:
        - image: cimg/python:3.10.1  # primary container for the build job
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}

  docker-publisher:
      docker:
        - image: circleci/buildpack-deps:stretch
          auth:
            username: ${DOCKER_USER}
            password: ${DOCKER_PASS}

jobs:
  compile:
    executor: openjdk
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Compile - JVM
          command: cat /dev/null | sbt test:compile

      - run:
          name: Compile - JS
          command: cat /dev/null | sbt test:compile

  test_and_coverage_jvm:
    executor: openjdk
    environment:
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Test JVM env and Coverage
          command: |
            cat /dev/null | sbt clean coverage Test/test coverageReport
            bash <(curl -s https://codecov.io/bash)
            bash <(curl -Ls https://coverage.codacy.com/get.sh) report

      - store_artifacts:
          path: target/test-reports

  planemo_stage:
    executor: python
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Test P2M2 tools for Galaxy
          command: |
            cd galaxy
            pip install planemo
            for directory in $(ls -d ls -d */ | awk '!/docker/ {print $0}')
            do
              echo " == $directory == "
              pushd $directory
              planemo l --fail_level error
              popd
            done
      - run:
          name: Run on fail status
          command: |
            mkdir -p /tmp/html_reports
            cp $(find ./galaxy/ -name *.html -type f)  /tmp/html_reports/
            mkdir -p /tmp/json_reports
            cp $(find ./galaxy/ -name *.json -type f)  /tmp/json_reports/
          when: on_fail

      - store_artifacts:
          path: /tmp/html_reports/tool_test_output.html
          destination: artifacts-planemo-reports-html
      - store_artifacts:
          path: /tmp/json_reports/tool_test_output.json
          destination: artifacts-planemo-reports-json

  publish_snapshot:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Snapshot publication
          command: |
            export PROG_VERSION="${CIRCLE_BRANCH}-SNAPSHOT"
            echo "Importing key"
            echo -e "$GPG_KEY" | gpg --import
            sbt publish

  publish_tag_to_sonatype_stagge_for_release:
    executor: openjdk
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.sbt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: Snapshot publication
          command: |
            export PROG_VERSION="${CIRCLE_TAG}"
            echo "Importing key"
            echo -e "$GPG_KEY" | gpg --import
            sbt publish

  build_branch:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Publish Docker Image to Docker Hub
          # publication of <application>:<application_branch>
          command: |
             cd docker
             IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH}

             docker build --build-arg BRANCH=${CIRCLE_BRANCH} -t ${ORGANIZATION_NAME}/${IMAGE_NAME} .
             echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
             docker push ${ORGANIZATION_NAME}/${IMAGE_NAME}
  
  build_tag_latest:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Publish Docker Tag to Docker Hub
          # publication of <application>:<application_tag>
          command: |
            cd docker
            IMAGE_NAME=${CIRCLE_PROJECT_REPONAME}:${CIRCLE_TAG}
            IMAGE_NAME_LATEST=${CIRCLE_PROJECT_REPONAME}:latest

            docker build --build-arg BRANCH=${CIRCLE_BRANCH} -t ${ORGANIZATION_NAME}/${IMAGE_NAME} .
            docker build --build-arg BRANCH=${CIRCLE_BRANCH} -t ${ORGANIZATION_NAME}/${IMAGE_NAME_LATEST} .

            echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin
            docker push ${ORGANIZATION_NAME}/${IMAGE_NAME}
            docker push ${ORGANIZATION_NAME}/${IMAGE_NAME_LATEST}

